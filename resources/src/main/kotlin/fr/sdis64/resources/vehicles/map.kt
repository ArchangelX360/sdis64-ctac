package fr.sdis64.resources.vehicles

import fr.sdis64.resources.SVG_NAMESPACE
import fr.sdis64.resources.toComposeStyle
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import nl.adaptivity.xmlutil.serialization.XML
import nl.adaptivity.xmlutil.serialization.XmlElement
import nl.adaptivity.xmlutil.serialization.XmlSerialName
import nl.adaptivity.xmlutil.serialization.XmlValue
import java.nio.file.Path
import kotlin.io.path.readText
import kotlin.io.path.writeText

fun Path.writeVehicleMapSvgComposableFunction(fromSvg: Path) {
    val svg = XML.decodeFromString(VehicleMapSvg.serializer(), fromSvg.readText())
    writeText("""
        /**
         * THIS FILE IS AUTOGENERATED BY `./gradlew :resources:generateUiResourcesComposableSourceFiles`, DO NOT EDIT MANUALLY
         */
        package fr.sdis64.ui.vehicles

        import androidx.compose.runtime.Composable
        import org.jetbrains.compose.web.ExperimentalComposeWebSvgApi
        import org.jetbrains.compose.web.svg.*

        @OptIn(ExperimentalComposeWebSvgApi::class)
        @Composable
        internal fun VehicleMapSvg(cisToColor: Map<String, String>) {
${svg.toCompose().prependIndent("            ")}
        }
    """.trimIndent())
}

@Serializable
@XmlSerialName("svg", SVG_NAMESPACE, "")
private data class VehicleMapSvg(
    val style: String,
    val viewBox: String,
    @XmlElement(value = true) val g: VehicleMapG,
) {
    fun toCompose(): String {
        return """
            Svg(
                viewBox = "$viewBox",
                attrs = {
${style.toComposeStyle(additionalProps = mapOf("height" to "\"100%\"", "width" to "\"100%\"")).prependIndent("                    ")}
                    xmlns("$SVG_NAMESPACE")
                },
            ) {
${g.toCompose().prependIndent("                ")}
            }
        """.trimIndent()
    }
}

@Serializable
@XmlSerialName("g", SVG_NAMESPACE, "")
private data class VehicleMapG(
    @SerialName("class") val cssClass: String,
    val transform: String,
    @XmlElement(value = true) val g: List<VehicleMapInnerG>,
) {
    fun toCompose(): String {
        return """
            G(
                attrs = {
                    attr("transform", "$transform")
                    attr("class", "$cssClass")
                },
            ) {
${g.joinToString("\n") { it.toCompose() }.prependIndent("                ")}
            }
        """.trimIndent()
    }
}

@Serializable
@XmlSerialName("g", SVG_NAMESPACE, "")
private data class VehicleMapInnerG(
    @SerialName("class") val cssClass: String?,
    val transform: String,
    @XmlElement(value = true) val path: VehicleMapPath?,
    @XmlElement(value = true) val text: VehicleMapText?,
) {
    fun toCompose(): String {
        val content = when {
            path != null -> path.toCompose(cssClass ?: "")
            text != null -> text.toCompose()
            else -> error("VehicleMapInnerG must have either path or text")
        }

        return """
            G(
                attrs = {
                    attr("transform", "$transform")
                    attr("class", "$cssClass")
                },
            ) {
${content.prependIndent("                ")}
            }
        """.trimIndent()
    }
}

@Serializable
@SerialName("path")
private data class VehicleMapPath(
    val d: String,
    val style: String,
) {
    fun toCompose(cisName: String): String {
        return """
            Path(
                attrs = {
${style.toComposeStyle(overrides = mapOf("fill" to "cisToColor[\"${cisName}\"] ?: \"none\"")).prependIndent("                    ")}
                },
                d = "$d",
            )
        """.trimIndent()
    }
}

@Serializable
@SerialName("text")
private data class VehicleMapText(
    val style: String,
    val x: String,
    val y: String,
    @XmlValue(value = true) val content: String,
) {
    fun toCompose(): String {
        return """
            SvgText(
                attrs = {
${style.toComposeStyle().prependIndent("                    ")}
                },
                text = "$content",
                x = ${x.replace("px", "")},
                y = ${y.replace("px", "")},
            )
        """.trimIndent()
    }
}
